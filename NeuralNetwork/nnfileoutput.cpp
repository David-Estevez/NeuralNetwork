#include "nnfileoutput.h"

//-- Store the files path:
//---------------------------------------------------------------------------

void NNFileOutput::addWeightsFile( const std::string filePath)
{
    weightsFile.push_back(filePath);
}

void NNFileOutput::setWeightsFile(const std::string filePath)
{
    weightsFile.clear();

    //--Generate the paths from filePath
    for (int i = 0; i < (int) nn->getL() - 1; i++)
    {
	char str[5];						//--Create aux string
	sprintf( str, "%d", i);					//--Convert number to string
	std::string aux = filePath.substr( 0, filePath.find(".txt"))
		+ "-" + std::string( str);			//--Append number to string
	aux+= ".txt";						//--Append file extension
	weightsFile.push_back( aux);
    }
}

void NNFileOutput::setWeightsFile( const std::string filePath, const int n)
{
    weightsFile.at(n) = filePath;
}

void NNFileOutput::setGuessFile( const std::string filePath)
{
    guessFile = filePath;
}

void NNFileOutput::setInputFile( const std::string filePath)
{
    inputFile = filePath;
}


//-- File Output interface:
//------------------------------------------------------------------
void NNFileOutput::outputWeights()
{
    //-- Check if file paths have been set:
    if (!weightsFile.empty())
    {
	//-- For each layer:
	for (int i = 0; i < (int) nn->getL() - 1; i++ )
	{
	    //-- Open the file
	    std::ofstream file( weightsFile.at(i).c_str());

	    if ( file.is_open())
	    {
		//-- Output a matrix
		file << "# Weights for layer: " << i+1 << std::endl;
		file << "# File generated by NeuralNetwork program." << std::endl;
		file << *nn->getWeights().at(i);
		file.close();
	    }
	    else
	    {
		std::cout << "[NNFileOutput] Error: file cannot be opened." << std::endl;
	    }
	}
    }
    else
    {
	std::cout << "[NNFileOutput] Error: file paths for weights not assigned." << std::endl;
    }
}

void NNFileOutput::outputGuess()
{
    //-- Check if file paths have been set:
    if (!guessFile.empty())
    {
	    //-- Open the file
	    std::ofstream file( guessFile.c_str());

	    if ( file.is_open())
	    {
		//-- Output the network guess
		file << "# Neural Network guess for given input:" << std::endl;
		file << "# Generated by NeuralNetwork program."<< std::endl << std::endl;
		for (int i = 0; i < (int) nn->getOutput().size(); i++)
		    file << nn->getOutput().at(i) << std::endl;
		file.close();
	    }
	    else
	    {
		std::cout << "[NNFileOutput] Error: file cannot be opened." << std::endl;
	    }
    }
    else
    {
	std::cout << "[NNFileOutput] Error: file paths for weights not assigned." << std::endl;
    }
}

void NNFileOutput::outputInput()
{
    //-- Open the file
    std::ofstream file( inputFile.c_str());

    if ( file.is_open())
    {
	//-- File header:
	file << "Neural Network input:" << std::endl;
	file << "--------------------------------------------" << std::endl << std::endl;

	const int cols = 20; //-- Number of columns if input is displayed as a matrix.

	//-- Get input vector:
	std::vector<double> input = nn->getInput();

	//-- Upper frame:
	for (int i = 0; i < (3 * cols + 2); i++)
	    file << '#';

	file << std::endl << '#';

	//-- Input data itself:
	for (int i = 0; i < input.size(); i++)
	    {
		//-- Character selection:
		if ( input.at(i) > 0 && input.at(i) < 0.33)
		    file << " Â· ";
		else if (input.at(i) > 0 && input.at(i) < 0.66)
		    file << " % ";
		else if (input.at(i) > 0.66 )
		    file << " # ";
		else if (input.at(i) < 0)
		    file << " - ";
		else
		    file << "   ";

		//-- Line break:
		if ( i != 0 && (i+1) % cols == 0)
		    file << '#' << std::endl << '#';
	}

	//-- Lower frame
	for (int i = 0; i < 3 * cols + 1; i++)
	    file << '#';

	file << std::endl;

	file.close();
    }
    else
    {
	std::cout << "[NNFileOutput] Error: file cannot be opened." << std::endl;
    }

}
